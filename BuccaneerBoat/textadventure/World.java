package textadventure;import java.util.*;import command.Command;import items.Beverage;import items.Boat;import items.Clothing;import items.Container;import items.Food;import items.Item;import items.Knife;import items.MapItem;import items.Oar;import items.Person;import items.Rope;import items.Scenery;import items.TradeableItem;import items.UselessItem;public class World {	/* Room String constants	 * 	 * Instead of hard-coding everywhere, room names are defined here.	 * They're also public and static so they can be accessed	 * anywhere using World.stringName	 */	public static final String PRISON = "PRISON";	public static final String KITCHEN = "KITCHEN";	public static final String STORAGEROOM = "STORAGE ROOM";	public static final String DECK = "DECK";	public static final String CAPTAINSROOM = "CAPTAINSROOM";	public double day = 1.0;	Person merchant;	/** Line word wrap length for console output */	public static final int LINE_WRAP_LENGTH = 70;	/* private World attributes */		/** The main player of the game, which is you */	private Player player;	/** Keeps track of the Rooms in this World using <Key, Value>	 *  pairs of <RoomName, RoomObject>	 */	private HashMap<String, Room> rooms;	/** Reads user input */	private static final Scanner IN = new Scanner(System.in);	/** Keeps track of time using built-in Java object */	/**	 * Create the game and initialize its internal map.	 */	public World() {		initializeNewGame();	}	public void initializeNewGame() {		// Initialize attributes		createRooms();		player = new Player(rooms.get(PRISON), this, 2);	}		/**	 * Print out the opening message for the player.	 */	private void printWelcome() {		System.out.println("______                                           ______             _   \r" + 				"| ___ \\                                          | ___ \\           | |  \r" + 				"| |_/ /_   _  ___ ___ __ _ _ __   ___  ___ _ __  | |_/ / ___   __ _| |_ \r" + 				"| ___ \\ | | |/ __/ __/ _` | '_ \\ / _ \\/ _ \\ '__| | ___ \\/ _ \\ / _` | __|\r" + 				"| |_/ / |_| | (_| (_| (_| | | | |  __/  __/ |    | |_/ / (_) | (_| | |_ \r" + 				"\\____/ \\__,_|\\___\\___\\__,_|_| |_|\\___|\\___|_|    \\____/ \\___/ \\__,_|\\__| \n");		print("    Your eyes slowly open, and you look around to see a dimly lit prison cell before you. A distant"			+ " storm rumbles and it echoes throughout the hull of this giant ship, and you feel water drip on your shoulder"			+ "from a small hole in the wall. As you peer through it you see the thrashing ocean under a gray storm. You turn"			+ " to shake the bars of your cell and ask a cranky-looking guard where you are. \n\n"			+ " 'Where are ya? Only in the prison cell of the most notorious pirate ship in the Indie waters mate.'\n\n");		print(player.getCurrentRoom().getDescription());		print("You have five days to get off this pirate ship somehow before you get caught and forced to walk the plank."				+ " Each day is 10 actions long. Type 'help' if you need help.\n\n");	}	/**	 * Create all the rooms and link their exits together.	 */	private void createRooms() {				// Create a new HashMap to store the rooms in		rooms = new HashMap<String, Room>();		// Create rooms and add them to our HashMap		rooms.put(PRISON, new Room(PRISON, "The prison cell is a medium-sized murky room with water"				+ " dripping down all sides, and the sound of the ocean sloshing the sides as the giant"				+ " ship moves. There are inmates all around you in seperate cells, each looking less human"				+ " than the last. The prisoners are all extremely thin, and many of them are missing teeth"				+ " , fingernails, or even some limbs. Beside you, there's a tattered paper that looks like"				+ " a map of some sort. There's a man with a grey beard and a black durag who "				+ " seems to be some sort of a guard. You can also see a bottle of rum, a small string,"				+ " even a golden compass on the ground in your adjacent cell\n\n", this));		rooms.put(KITCHEN, new Room(KITCHEN, "As you walk into the kitchen, smells come from every angle,"				+ " with food present at every table. You can see the crew on some tables, hounding away at"				+ " scraps of food like scavengers. Giant barrels line the wall, along with a locked vault"				+ " presumably containing loot. You see a chicken leg on the nearest table, and a lone oar"				+ " beside it.\n\n", true, this));		rooms.put(STORAGEROOM, new Room(STORAGEROOM, "The storage room is filled with supplies cramped up"				+ " everywhere, like cannonballs, gunpowder, sugar, water, and clothing. At the end of the"				+ " hallway, you see a very decorated door, with crystals encrusting every inch, and a large"				+ " golden lock to it. Beside you is one cannonball, and a whole bag of sugar.\n\n", this));		rooms.put(DECK, new Room(DECK, "Upstairs on the deck, it’s mayhem with crewmembers running back and"				+ " forth. The dark blue ocean sparkles as you look at it. You feel the sea breeze on your face,"				+ " along with yells everywhere. Lined on the side are huge cannons, and starboard, there’s a"				+ " small transporter boat, locked and surrounded by rope. You can see a crew member eyeing you"				+ " suspiciously, and on the ground there’s an eyepatch.\n\n", this));		rooms.put(CAPTAINSROOM, new Room(CAPTAINSROOM, "The captain’s cabin is a spacious triangular room, with"				+ " maps, compasses, and papers on every table. There’s a large chair in the center, with the captain"				+ " sitting on it pondering hard. You watch him from behind one of the tables, as he’s unaware you’re"				+ " there. Beside you is a golden apple, a dull knife, and a playing card on the table.\n\n", this));				// Define room exits. setExits(east, west, up, down) 		rooms.get(PRISON).setExits(null, rooms.get(KITCHEN), null, null);		rooms.get(KITCHEN).setExits(rooms.get(PRISON), rooms.get(STORAGEROOM), rooms.get(DECK), null);		rooms.get(STORAGEROOM).setExits(rooms.get(KITCHEN), rooms.get(CAPTAINSROOM), null, null);		rooms.get(CAPTAINSROOM).setExits(rooms.get(STORAGEROOM), null, null, null);		rooms.get(DECK).setExits(null, null, null, rooms.get(KITCHEN));				//Items		TradeableItem silverTooth = new TradeableItem(this, "silver_tooth", 2, Item.TAKEABLE, "A shiny silver tooth that looks like it could fetch a decent price...");		Person oldMan = new Person(this, "old_man", 20, Item.NOT_TAKEABLE, "Your neighboring inmate is an old man, around 80, with a silver tooth. He peers at you through the prison bars.");		Beverage bottleOfRum = new Beverage(this, "bottle_of_rum", 5, true, "An old bottle of spiced rum.");		MapItem map = new MapItem(this, "map", 2, Item.TAKEABLE, "An old tattered layout of the ship, showing all it's nooks and crannies.");		Person guard = new Person(this, "guard", 20, Item.NOT_TAKEABLE, "A tall man with a grey beard wearing a black durag.");		oldMan.addItem(silverTooth);		Food chickenLeg = new Food(this, "chicken_leg", 3, Item.TAKEABLE, "A large chicken leg that looks quite tasty.");		Oar oar1 = new Oar(this, "oar1", 4, Item.TAKEABLE, "A simple wooden oar.");		TradeableItem bagOfSugar = new TradeableItem(this, "bag_of_sugar", 6, Item.TAKEABLE, "A large bag of molasses sugar that comes from Jamaica");		UselessItem cannonball = new UselessItem(this, "cannonball", 12, Item.TAKEABLE, "A large black 12 pounder made of pure iron.");		Food goldenApple = new Food(this, "golden_apple", 2, Item.TAKEABLE, "An apple with a rich gold hue that looks like something out of a dream.");		Knife dullKnife = new Knife(this, "dull_knife", 2, Item.TAKEABLE, "A gray dull knife that looks about as useful as your fingernails.");		merchant = new Person(this, "merchant", 20, Item.NOT_TAKEABLE, "A man by one of the masts, who does't look like a crew member, but a merchant of some kind.");		Container cannon = new Container(this, "cannon", "A large wheeled cannon capable of destroying the hull of any ship.");		Scenery ocean = new Scenery(this, "ocean", 0, "You turn towards the ocean and feel a breeze on your face. The dark blue of the ocean gilstens, and past the horizon, you can even make out the outline of a small port.");		TradeableItem goldenCompass = new TradeableItem(this, "golden_compass", 4, Item.NOT_TAKEABLE, "A large golden compass with the words 'For Jack' engraved on the edges. Hmm, who could Jack be?");		Rope string = new Rope(this, "small_string", 1, Item.TAKEABLE, "A thin twin string, not quite a rope though.");		UselessItem aceOfSpades = new UselessItem(this, "ace_of_spades", 1, Item.TAKEABLE, "A single playing card.");		Clothing bandana = new Clothing(this, "bandana", 2, Item.TAKEABLE, "A brown bandana perfect for disguising yourself as a pirate!");		Clothing eyepatch = new Clothing(this, "eyepatch", 2, Item.TAKEABLE, "A black eyepatch perfect for disguising yourself as a pirate!");		Boat boat = new Boat(this, "boat", 50, Item.NOT_TAKEABLE, "A small dinghy transporter boat.");		rooms.get(PRISON).addItem(string);		rooms.get(PRISON).addItem(goldenCompass);		rooms.get(PRISON).addItem(guard);		rooms.get(PRISON).addItem(bottleOfRum);		rooms.get(PRISON).addItem(silverTooth);		rooms.get(PRISON).addItem(oldMan);		rooms.get(PRISON).addItem(map);				rooms.get(KITCHEN).addItem(chickenLeg);		rooms.get(KITCHEN).addItem(oar1);				rooms.get(STORAGEROOM).addItem(bagOfSugar);		rooms.get(STORAGEROOM).addItem(cannonball);				rooms.get(CAPTAINSROOM).addItem(goldenApple);		rooms.get(CAPTAINSROOM).addItem(dullKnife);		rooms.get(CAPTAINSROOM).addItem(aceOfSpades);				rooms.get(DECK).addItem(eyepatch);		rooms.get(DECK).addItem(bandana);		rooms.get(DECK).addItem(merchant);		rooms.get(DECK).addItem(cannon);		rooms.get(DECK).addItem(ocean);		rooms.get(DECK).addItem(boat);	}	public Room getRoom(String key) {		return rooms.get(key);	}	public Player getPlayer() {		return player;	}		public Person getMerchant() {		return merchant;	}	/**	 * Main play routine. Loops until end of play.	 */	public void play() {		printWelcome();		// Enter the main command loop. Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			System.out.print("> "); // print prompt			String command = IN.nextLine();			finished = processCommand(command);			day+=0.1;			if(getDay() == 5) {				World.print("It's been 5 days now, yet you haven't found your way off the boat. Finally"						+ ", the captain catches you running around and subjects you to walk the plank."						+ " You try to 'invoke the right of parley' but instead the pirates just laugh at"						+ " you. Eh, you probably would have died off sickness soon anyways. \n"						+ " GAME OVER ");				System.exit(0);			}		}	}	public int getDay() {		return (int)(day);	}		/**	 * Given a command, process (that is: execute) the command. If this command ends	 * the game, true is returned, otherwise false is returned.	 */	private boolean processCommand(String command) {		StringTokenizer tok = new StringTokenizer(command);		if (tok.hasMoreTokens()) {			if (tok.nextToken().equals("quit"))				return true;			else if (!Command.hasValidCommandWord(command)) {				print("I don't know the command '" + command + "'\n\n");				return false;			}			else {				World.print("Day " + (int)(day) + "\n");				Command.doCommand(command, this);				return false;			}		} else {			print("Please type in a command" + "\n\n");			return false;		}			}	/**	 * Helper method to print any String in a line-wrapped format.	 * Prints the input String line-wrapped to a column width of LINE_WRAP_LENGTH,	 * which is a constant defined at the top of this class.	 * 	 * Pseudocode and strategy:	 * There are so many special cases, I could not have written this without planning it out.	 * I decided to leave the comments here so you can see the strategy.	 *  - Mr. Ferrante	 * 	 * while(length of str >= lengthLimit)	 * 		Find the first occurrence of \n.	 * 		If it's < lengthLimit then add substring(0, occurrence + 1) to output and reduce str by same amount.	 * 		Else if there's a space at lengthLimit then add substring(0, lengthLimit) to output and	 *  		reduce str by same amount	 * 		Else find last occurrence of space within substring(0, lengthLimit)	 * 			If no space anywhere then	 * 				If there's a space at least somewhere in str, then add substring(0, firstSpace) to	 * 					output and reduce str by same amount	 * 				Else (no space anywhere)	 * 					add rest of str to output and reduce by same amount	 * 			Else (space somewhere within substring)	 * 				add str.substring(0, index of last space) to output	 * 				reduce str by same amount	 * If there's anything left in str, add it.	 */	public static void print(String str) {		String output = "";				while (str.length() >= LINE_WRAP_LENGTH) {			int lineBreakIndex = str.indexOf("\n");			if (lineBreakIndex < LINE_WRAP_LENGTH && lineBreakIndex != -1) {				output += str.substring(0, lineBreakIndex + 1);				str = str.substring(lineBreakIndex + 1);			}			else if (str.charAt(LINE_WRAP_LENGTH) == ' ') {				output += str.substring(0, LINE_WRAP_LENGTH);				str = str.substring(LINE_WRAP_LENGTH + 1);				if (str.length() > 0)					output += "\n";			}			else {				int lastSpaceIndex = str.substring(0, LINE_WRAP_LENGTH).lastIndexOf(" ");				if (lastSpaceIndex == -1) {					int firstSpaceIndex = str.indexOf(" ");					if (firstSpaceIndex != -1) {						output += str.substring(0, firstSpaceIndex);						str = str.substring(firstSpaceIndex + 1);						if (str.length() > 0)							output += "\n";					}					else {						output += str;						str = "";					}				}				else {					output += str.substring(0, lastSpaceIndex);					str = str.substring(lastSpaceIndex + 1);					if (str.length() > 0)						output += "\n";				}			}		}		if (str.length() > 0) {			output += str;		}		if(Player.getDrunk()) {			output = shuffle(output) + "\n";		}		System.out.print(output);	}		public static String shuffle(String text) {	    char[] characters = text.toCharArray();	    for (int i = 0; i < characters.length; i++) {	        int a = (int)(Math.random() * characters.length);	        char temp = characters[i];	        characters[i] = characters[a];	        characters[a] = temp;	    }	    return new String(characters);	}}