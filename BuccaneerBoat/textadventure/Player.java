package textadventure;import items.Container;/** * A Player can contain objects and knows the Room it's currently in. */public class Player extends Container {	/** Room this Player is in at the moment */	private Room currentRoom;	private int health;	private static boolean isDrunk = false;	private boolean examinedCompass = false;	private boolean talkedToGuard = false;	private boolean hasLeftPrison = false;	private boolean isBoatUnlocked = false;	private boolean isWearingBandana = false;	private boolean isWearingEyepatch = false;		/** Creates a player that starts in the given Room with no items */	public Player(Room startRoom, World world, int health) {		super(world, "Player", "Your clothes are tattered up, and the smell of rum stinks them.");		currentRoom = startRoom;		this.health = health;	}	/* Getters and setters */	public boolean getIsWearingEyepatch() {		return this.isWearingEyepatch;	}		public void setIsWearingEyepatch(boolean state) {		this.isWearingEyepatch = state;	}			public boolean getIsWearingBandana() {		return this.isWearingBandana;	}		public void setIsWearingBandana(boolean state) {		this.isWearingBandana = state;	}		public boolean getIsBoatUnlocked() {		return this.isBoatUnlocked;	}		public void setIsBoatUnlocked(boolean state) {		this.isBoatUnlocked = state;	}		public void setExaminedCompass(boolean state) {		this.examinedCompass = state;	}		public boolean getExaminedCompass() {		return this.examinedCompass;	}		public Room getCurrentRoom() {		return currentRoom;	}	public void setCurrentRoom(Room newRoom) {		currentRoom = newRoom;	}	public int getHealth() {		return health;	}	public void setHealth(int health) {		this.health = health;	}	public static boolean getDrunk() {		return isDrunk;	}	public void setDrunk(boolean isDrunk) {		this.isDrunk = isDrunk;	}	public void setTalkedToGuard(boolean state) {		this.talkedToGuard = state;	}	public boolean getTalkedToGuard() {		return talkedToGuard;	}	public boolean hasLeftPrison() {		return this.hasLeftPrison;	}		public void setHasLeftPrison(boolean state) {		this.hasLeftPrison = state;	}}